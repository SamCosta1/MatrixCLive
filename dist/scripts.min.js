function AllCalculations (_name, _matrix) {
    var matrix = _matrix,
        name = _name,
        functions = [funcENUM.TRANSPOSE, funcENUM.INVERSE, funcENUM.DET, funcENUM.ROWREDUCE, funcENUM.RANK],
        label = '<div class="allCalcLabel">';

    function generateAll() {
        var str = '$$',
            calcSteps = new CalculationArray();
        // First the actual matrix
        str += '\\text{' + name + '}=' + matrix.getTex() + '$$';

        for (var func in functions) {
            str += label + funcENUM.getString(functions[func]) + '</div>';
            try {
                var step = new CalculationStep({
                    type: functions[func],
                    op1:  matrix,
                });

                step.data.result = matrix.performFunction(functions[func],null,step);
                str += '$$' + step.data.result.getTex() + '$$';

                calcSteps.push(step);
            } catch (e) {
                str += '-';
            }
        }

        calcSteps.render($('.sidebarBody'));
        return str;

    }

    return {
        getTex: generateAll,
    };
}

function ApplicationManager() {
    var variables = null,
        commandLine = null,
        popup = null,
        matrixManager = null,
        sidebar = null,
        header = null,
        quickCalcsPanel = null,
        settings = null;

    function init() {
        variables = new Variables();
        popup = new Popup();
        sidebar = new Sidebar();
        header = new Header();
        settings = new Settings();
        quickCalcsPanel = new QuickCalculations();
        matrixManager = new MatrixInputManager(variables, popup, quickCalcsPanel);
        commandLine = new CommandLine(variables, matrixManager).init();

        header.init();
        settings.init();
        quickCalcsPanel.init(matrixManager, variables);
        variables.init();
        matrixManager.init();
        sidebar.init();
        popup.init();

        $('.settingsBtn').click(onSettingsClicked);
    }

    function onSettingsClicked() {
        popup.render({
            header: "Settings",
            body: settings.getDom()
        }, false);
    }

    return {
        init: init
    };
}

function CalculationArray() {
    this.steps = [];
}
CalculationArray.prototype.push = function(obj) {
    this.steps.push(obj);
};
CalculationArray.prototype.render = function($parent) {
    if (this.steps.length === 0) {
        return;
    }
    var $thisCalc = $('<div class="calculation">');

    for (var step = 0; step < this.steps.length; step++)
        this.steps[step].render($thisCalc);
    $parent.prepend($thisCalc);
    MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
};

function CalculationStep(_data) {
    this.data = _data;
    this.subSteps = [];
}

CalculationStep.prototype.push = function(calcStp) {
    this.subSteps.push(calcStp);
};
CalculationStep.prototype.length = function() {
    return this.subSteps.length;
};
CalculationStep.prototype.render = function($parent) {
    var $container = $('<div>', {
        class: 'calcStepContainer'
    });

    if (this.length() > 0) {
        var $subContainer = $('<div>', {
            class: 'calcStepContainer subContainer'
        });
        // Render all substeps
        for (var step = 0; step < this.length(); step++)
            this.subSteps[step].render($subContainer);
        $container.append($subContainer);
    }

    // render this
    var $resultContainer = $('<div>', {
        class: 'calcStepContainer resultContainer'
    });
    this.renderThis($resultContainer);
    $container.append($resultContainer);
    $parent.append($container);
};
CalculationStep.prototype.renderThis = function($parent) {
    var tex = '$$';
    switch (this.data.type) {
        case funcENUM.INVERSE:
            tex += '\\text{inverse} \\Bigg(' + this.data.op1.getTex() + '\\Bigg) = ' + this.data.result.getTex();
            break;
        case funcENUM.DET:
            tex += '\\text{determinant} \\Bigg(' + this.data.op1.getTex() + '\\Bigg) = ' + this.data.result.getTex();
            break;
        case funcENUM.ROWREDUCE:
            tex += '\\text{reduced row echelon form of }' + this.data.op1.getTex() + ' is ' + this.data.result.getTex();
            break;
        case funcENUM.TRANSPOSE:
            tex += '\\text{transpose} \\Bigg(' + this.data.op1.getTex() + '\\Bigg) = ' + this.data.result.getTex();
            break;
        case funcENUM.RANK:
            tex += '\\text{rank} \\Bigg(' + this.data.op1.getTex() + '\\Bigg) = ' + this.data.result.getTex();
            break;
        case '+':
        case '-':
            tex += this.data.op1.getTex() + this.data.type + this.data.op2.getTex() + '=' + this.data.result.getTex();
            break;
        case '*':
            tex += this.data.op1.getTex() + '\\times' + this.data.op2.getTex() + '=' + this.data.result.getTex();
            break;
        case 'comment':
            tex += '\\text{' + this.data.comment + '}';
            break;
        case '/':
            tex += '\\frac{' + this.data.op1.getTex() + '}{' + this.data.op2.getTex() + '}' + '=' + this.data.result.getTex();
            break;
        case '^':
            tex += '(' + this.data.op1.getTex() + ')^{' + this.data.op2.getTex() + '} = ' + this.data.result.getTex();
            break;
        case 'splitAug':
            tex += '\\text{Take the right hand side as the inverse: }' + this.data.op1.getTex();
            break;
        case 'swap':
            tex += '\\text{Swap } R_'+ (this.data.op1+1) +'\\text{ and }R_ ' + (this.data.op2+1) + ' => ' + this.data.result.getTex();
            break;
        case 'augment':
            tex += '\\text{augment } ' + this.data.op1.getTex() + ' \\text{with} ' + this.data.op2.getTex() + ' \\text{' + this.data.message + '}' + ' \\\\ =>' + this.data.result.getTex();
            break;
        case 'multiplyRow':
            tex += '\\text{Multiply } R_' + (this.data.rowNum+1) + '\\text{ by }' + this.data.op2.getTex() + '\\\\' + this.data.op1.getRowTex(this.data.rowNum) + '\\times' + this.data.op2.getTex() + '\\rightarrow' + this.data.result.getTex();
            break;
        case 'subtractRows':
            var multOp = (this.data.multiplier.isPositive() ? '-' : '+'),
                mult = this.data.multiplier.isOne() ? '' : '\\times' + this.data.multiplier.abs();
            tex += 'R_' + (this.data.row2Num+1) + '\\leftarrow R_' + (this.data.row2Num+1) + multOp + 'R_' + (this.data.row1Num+1) + mult +
                        '\\\\' + this.data.op1.getTex() + multOp + this.data.op2.getTex() + mult + '=' +
                         this.data.result.getTex();
            break;

    }
    tex += '$$';
    $parent.append(tex);
};

function CommandLine(_variables, _matrixManager) {

    var $commandLineTxtBox = $('#cmdinput'),
        $errorLabel = $('.errDisplay'),
        $errorContainer = $('.errContainer'),
        base = 'MatCalculator >> ',
        baseRegex = new RegExp('^' + base, 'i'),

        history = new commandHistory(),
        matrixManager = _matrixManager,
        parser = new Parser(_variables);

    function init() {
        history.init();
        $commandLineTxtBox.on('input', lockPromptText);
        $commandLineTxtBox.keyup(onKeyUp);
        $('body').on('error', function(data) { errorHandle(data.msg); });
    }

    function onKeyUp(e) {
        e.stopImmediatePropagation(); // Mainly to stop delete key deleting the matrix
        var code = e.keyCode ? e.keyCode : e.which,
        returned;

        switch (code) {
            case 13: // Enter key pressed
                var input = $commandLineTxtBox.val().slice(base.length);
                history.push(input);
                commandInput(input); // Execute
                break;

            case 38: // Up key pressed
                if ((returned = history.popUp())) {
                    $($commandLineTxtBox).val(base + returned);
                }
                break;

            case 40: // Down key pressed
                if ((returned = history.popDown())) {
                    $($commandLineTxtBox).val(base + returned);
                }
                break;

            default:
                history.resetCount();
                break;
        }
    }

    function commandInput(cmd) {
        try {
            var start = Date.now();

            $errorLabel.hide();
            var result = parser.parse(cmd);

            matrixManager.render(result);

            $commandLineTxtBox.val(base);

            var end = Date.now() - start;
            successHandle(end);
            console.log("Operation done in " + end + "ms");
        } catch (err) {
            errorHandle(err);
            $commandLineTxtBox.val($commandLineTxtBox.val().replace(/\n/g, ''));
        }
    }

    function errorHandle(err) {
        console.log(err);
        $errorContainer.removeClass('success');
        $errorLabel.text(err).show();
    }

    function successHandle(msg) {
        $errorContainer.addClass('success');
        $errorLabel.text('Command Successful! (' + msg + ' ms' + ')').show(200);
        setTimeout(function() {
            $errorLabel.hide(500);
        }, 2000);
    }

    function lockPromptText() {
        var query = $($commandLineTxtBox).val();
        if (!baseRegex.test(query)) {
            $($commandLineTxtBox).val(base);
        }
    }

    function commandHistory() {
        var comHist = [],
            histPos = -1;

        function init() {
            for (var key in localStorage) {
                var res;
                if ((res = /HISTORY-(.+)/.exec(key))) {
                    if (localStorage.getItem(key) === 'undefined') {
                        continue;
                    }
                    comHist.splice(res, 0, localStorage.getItem(key));
                }
            }
            comHist.reverse();
            histPos = comHist.length;
        }

        function push(item) {
            // Only add the command if not already present and not undefined
            if (comHist.indexOf(item) < 0 && /\S/.test(item) && comHist !== 'undefined') {
                item = item.replace(/\n/g, '');
                comHist.push(item);
                localStorage.setItem('HISTORY-' + comHist.length, item);
                histPos++;
            }
        }

        function popUp() {
            if (histPos > 0 && comHist.length > 0) {
                histPos--;
                return comHist[histPos];
            } else {
                return false;
            }
        }

        function popDown() {
            if (histPos < comHist.length - 1 && comHist.length > 0) {
                histPos++;
                return comHist[histPos];
            } else {
                return false;
            }
        }

        return {
            push: push,
            popUp: popUp,
            popDown: popDown,
            resetCount: function() {
                histPos = comHist.length;
            },
            init: init
        };
    }

    return {
        init: init
    };
}

function Fraction(top, bottom) {
    this.top = top;
    this.bottom = bottom;
    if (top === undefined || top === '') {
        this.top = '0';
        this.bottom = '1';
    } else if (bottom === undefined || bottom === '') {
        this.bottom = '1';
    }
    this.bottom = this.bottom.toString();
    this.top = this.top.toString();

    if (this.top.indexOf('/') > 0) {
        this.top = top.split('/')[0];
        this.bottom = top.split('/')[1];
    }

    this.top = new Big(this.top);
    this.bottom = new Big(this.bottom);

    // Convert decimal numbers into Fraction
    var topDec = !this.top.mod(1).eq(0);
    var botDec = !this.bottom.mod(1).eq(0);
    if (topDec || botDec) {
        var noDigtsTop = topDec ? this.top.toString().split('.')[1].length : 0;
        var noDigtsBot = botDec ? this.bottom.toString().split('.')[1].length : 0;
        var multiplier = Big(10).pow(noDigtsBot > noDigtsTop ? noDigtsBot : noDigtsTop);
        this.top = this.top.times(multiplier);
        this.bottom = this.bottom.times(multiplier);
    }
    this.simplify();
}

Fraction.prototype.parseLiteral = function(v) {
    if (v instanceof Fraction)
        return v;
    else
        return new Fraction(v);
};
Fraction.prototype.simplify = function() {
    var gcd = GCD(this.top, this.bottom);
    this.top = this.top.div(gcd);
    this.bottom = this.bottom.div(gcd);
    if (this.bottom.lt(0)) {
        this.top = this.top.times(-1);
        this.bottom = this.bottom.times(-1);
    }
};
Fraction.prototype.divide = function(v) {
    v = this.parseLiteral(v);
    var result = new Fraction();
    result.top = this.top.times(v.bottom);
    result.bottom = this.bottom.times(v.top);
    result.simplify();
    return result;
};
Fraction.prototype.getTopString = function() {
    return this.top.toString();
}
Fraction.prototype.getBottomString = function() {
    return this.bottom.toString();
}
Fraction.prototype.times = function(v) {
    v = this.parseLiteral(v);
    if (this.top.eq(0) || v.top.eq(0))
        return new Fraction();
    var result = new Fraction();
    result.bottom = this.bottom.times(v.bottom);
    result.top = this.top.times(v.top);
    result.simplify();
    return result;
};
Fraction.prototype.power = function(v) {
    v = this.parseLiteral(v);
    var pow = parseInt(v.top.valueOf());
    var result = this.clone();
    for (var p = 1; p < pow; p++)
        result = result.times(this);
    return result;
};
Fraction.prototype.add = function(v) {
    v = this.parseLiteral(v);
    var result = new Fraction();
    result.top = this.top.times(v.bottom).add(this.bottom.times(v.top));
    result.bottom = this.bottom.times(v.bottom);
    result.simplify();
    return result;
};
Fraction.prototype.subtract = function(v) {
    v = this.parseLiteral(v);
    var result = new Fraction();
    result.top = this.top.times(v.bottom).minus(this.bottom.times(v.top));
    result.bottom = this.bottom.times(v.bottom);
    result.simplify();
    return result;
};
Fraction.prototype.reciprocal = function() {
    if (!this.top.eq(0))
        return new Fraction(this.bottom, this.top);
    else return new Fraction();
};
Fraction.prototype.getLiteral = function() {
    return parseInt(this.top.div(this.bottom).valueOf());
};
Fraction.prototype.isPositive = function() {
    return this.top.gt(0);
};
Fraction.prototype.abs = function() {
    return new Fraction(this.top.abs(), this.bottom.abs());
};
Fraction.prototype.isZero = function() {
    return this.top.eq(0);
};
Fraction.prototype.isOne = function() {
    return this.bottom.eq(this.top);
};
Fraction.prototype.isInt = function() {
    return this.bottom.eq('1');
};
Fraction.prototype.toString = function() {
    if (this.top.eq(0))
        return '0';
    if (this.bottom.eq(1))
        return this.top.toString();
    if (this.isOne())
        return '1';
    return this.top.toString() + '/' + this.bottom.toString();
};
Fraction.prototype.clone = function() {
    return new Fraction(this.top, this.bottom);
};
Fraction.prototype.getTex = function() {
    if (this.isOne())
        return '1';
    else if (this.isZero())
        return '0';
    else if (this.bottom.eq(1))
        return this.top.toString();
    else
        return "\\frac{" + this.top.toString() + "}{" + this.bottom.toString() + "}";
};

function GCD(big, small) {
    //HACK Not sure if it's best to do this here
    if (small.eq(0))
        return 1;

    var r = big.mod(small);
    if (r.eq(0))
        return small;
    else {
        return GCD(small, r);
    }
}

function FractionalInputCellManager(onChange) {

    function getCell(row, col, val) {
        var $container = $('<div class="matrixCell">');
        var $top = $('<input class="inputCell top" type="text">').appendTo($container);
        $('<hr class="fractionLine">').appendTo($container);
        var $bottom = $('<input class="inputCell bottom" type="text">').appendTo($container);


        if (val.isZero()) {
            $container.addClass('zero');
        }
        if (!val.isInt()) {
            $container.addClass('fraction');
        }

        $top.val(val.getTopString());
        $bottom.val(val.getBottomString());

        $container.attr('data-row', row);
        $container.attr('data-col', col);

        if (val.getBottomString() === '1') {
            $container.removeClass('fraction');
        } else {
            $container.addClass('fraction');
        }

        $top.keyup(function() {
            if ($(this).val().indexOf('/') > 0) {
                $(this).parent().addClass("fraction");
                $(this).val($(this).val().split('/')[0]);
                $(this).siblings('.bottom').val('');
                $(this).siblings('.bottom').focus();
            }
        });

        $top.click(function(e) {
            e.stopImmediatePropagation();
            if ($(this).val() === "0")
                $(this).val("");
            else {
                $(this).parent().removeClass('zero');
            }
        });

        $top.on('change focusout keyup',function(e) {
            var newVal = $(this).val().trim();

            if (newVal === '0')
                $(this).parent().addClass('zero');
            else if (e.type !== 'keyup' && newVal.trim() === '') {
                $(this).val('0');
                $(this).parent().addClass('zero');
            } else {
                $(this).parent().removeClass('zero');
            }
        });

        $bottom.focusout(function() {
            var newVal = $(this).val().trim();

            if (newVal === '') {
                $(this).parent().removeClass('fraction');
                $(this).siblings('.top').focus();
            } else if (newVal === '1' || $(this).siblings('.top').val().trim() === '0') {
                $(this).parent().removeClass('fraction');
            }
        });

        $container.change(onChange);

        $container.keyup(function(e) {
            e.stopImmediatePropagation();
        });

        return $container;
    }

    function updateCell($parent, top, bottom) {
        $parent.find('.top').val(top);
        $parent.find('.bottom').val(bottom);

        if (top === '0') {
            $parent.find('.matrixCell').addClass('zero');
        } else {
            $parent.find('.matrixCell').removeClass('zero');
        }

        if (bottom !== '1') {
            $parent.find('.matrixCell').addClass('fraction');
        } else {
            $parent.find('.matrixCell').removeClass('fraction');
        }

    }

    return {
        getCell: getCell,
        updateCell: updateCell
    }
}

function Header() {
    var $mainHeader = $('#header'),
        $title = $('.middleTitle'),
        $menu = $('.headerMenu'),
        $toggle = $('.headerToggleBar'),

        collapsed = false;

    function init() {
        $toggle.click(onToggleClick);
        $mainHeader.dblclick(onToggleClick);
    }

    function onToggleClick() {
        collapsed = !collapsed;

        if (collapsed) {
            $mainHeader.addClass('collapsed');

            $toggle.removeClass('icon-double-up-arrows');
            $toggle.addClass('icon-double-down-arrows');
        } else {
            $mainHeader.removeClass('collapsed');
            $toggle.addClass('icon-double-up-arrows');
            $toggle.removeClass('icon-double-down-arrows');
        }


    }

    return {
        init: init
    }
}

// Usually an array would be supplied to be wrapped, sometimes rows,cols will be surprised to allow
// creation of an empty matrix of any size;
function Matrix(arrMatrix, cols) {
    this.matrix = arrMatrix;
    if (arrMatrix && arrMatrix[0] instanceof Fraction) {
        this.matrix = [this.matrix];
    }
    this.multiplier = new Fraction('1');
    if (arrMatrix === undefined)
        this.matrix = this.getZeros(3).matrix;
    else if (!isNaN(arrMatrix))
        this.matrix = this.getZeros(arrMatrix, cols).matrix;
}

Matrix.prototype.update = function(row, col, val) {
    this.matrix[parseInt(row)][parseInt(col)] = val instanceof Fraction ?
        val : new Fraction(val);
};
Matrix.prototype.toString = function() {
    var str = '';
    for (var r = 0; r < this.numRows(); r++) {
        for (var c = 0; c < this.numCols(); c++)
            str += ' ' + this.matrix[r][c].getLiteral();
        str += '\n';
    }
    return str;
};
Matrix.prototype.getCell = function(row, col) {
    return this.matrix[row][col];
};
Matrix.prototype.numRows = function() {
    return this.matrix.length;
};
Matrix.prototype.numCols = function() {
    return this.matrix[0].length;
};
Matrix.prototype.clone = function() {
    var result = [];
    for (var i = 0; i < this.numRows(); i++) {
        var sub = [];
        for (var j = 0; j < this.numCols(); j++)
            sub.push(this.getCell(i, j).clone());
        result.push(sub);
    }
    return new Matrix(result);
};
// Standard functions
Matrix.prototype.determinant = function() {
    if (this.numRows() == 2)
        return this.getCell(0, 0).times(this.getCell(1, 1))
            .subtract(this.getCell(1, 0).times(this.getCell(0, 1)));
    var reduced = this.reduceToReducedEchF();
    var multiplier = reduced.multiplier;

    var lastRow = reduced.numRows() - 1;
    var sum = new Fraction();
    var mult = 1;
    for (var col = 0; col < reduced.numCols(); col++, mult *= -1) {
        if (!reduced.matrix[lastRow][col].isZero())
            sum = sum.add(reduced.subMatrix(lastRow, col).det().times(mult).times(reduced.matrix[lastRow][col]));
    }
    return sum.times(multiplier);
};
Matrix.prototype.subMatrix = function(row, col) {
    var result = [];
    for (var r = 0; r < this.numRows(); r++) {
        if (r != row) {
            var sub = [];
            for (var c = 0; c < this.numCols(); c++)
                if (c != col)
                    sub.push(this.getCell(r, c).clone());
            result.push(sub);
        }
    }
    return new Matrix(result);
};
Matrix.prototype.det = function() {
    return this.determinant();
};
Matrix.prototype.transpose = function() {
    var result = [];
    for (var col = 0; col < this.numCols(); col++) {
        var sub = [];
        for (var row = 0; row < this.numRows(); row++)
            sub.push(this.getCell(row, col));
        result.push(sub);
    }
    return new Matrix(result);
};
Matrix.prototype.concat = function(other) {
    var result = this.clone().matrix;
    for (var r = 0; r < result.length; r++)
        result[r] = result[r].concat(other.matrix[r]);
    return new Matrix(result);
};
Matrix.prototype.inverse = function() {
    var id = this.getIdentity(this.numCols());
    var aug = this.concat(id);
    var augCopy = aug.clone();
    this.step.push(new CalculationStep({
        type: 'augment',
        op1: this.clone(),
        result: augCopy,
        op2: id,
        message: "(the identity matrix)"
    }));
    aug = aug.reduceToReducedEchF(this.numCols(), this.step);
    this.step.push(new CalculationStep({
        type: funcENUM.ROWREDUCE,
        op1: augCopy,
        result: aug.clone()
    }));
    for (var r = 0; r < this.numRows(); r++) {
        // Check first part of augmented is identity (otherwise noninvertible)
        for (var c = 0; c < this.numCols(); c++) {
            if (c == r) {
                if (!aug.getCell(r, c).isOne())
                    throw ("Matrix non invertible");
            } else if (!aug.getCell(r, c).isZero())
                throw ("Matrix non invertible");
        }

        aug.matrix[r] = aug.matrix[r].slice(this.numCols(), this.numCols() * 2);
    }
    this.step.push(new CalculationStep({type:'splitAug', op1:aug}));
    return aug;

};
Matrix.prototype.add = function(other) {
    var result = [];
    for (var i = 0; i < this.numRows(); i++) {
        var sub = [];
        for (var j = 0; j < this.numCols(); j++)
            sub.push(this.getCell(i, j).add(other.getCell(i, j)));
        result.push(sub);
    }
    return new Matrix(result);
};
Matrix.prototype.subtract = function(other) {
    var result = [];
    for (var i = 0; i < this.numRows(); i++) {
        var sub = [];
        for (var j = 0; j < this.numCols(); j++)
            sub.push(this.getCell(i, j).subtract(other.getCell(i, j)));
        result.push(sub);
    }
    return new Matrix(result);
};
Matrix.prototype.times = function(other) {
    if (!(other instanceof Matrix))
        return this.timesScalar(other);
    if (this.numCols() != other.numRows() || this.numRows() != other.numCols())
        throw "Dimension mismatch, can't multiply " + this.numRows() +
            "x" + this.numCols() + " by " + other.numRows() + "x" + other.numCols();

    var result = new Matrix(this.numRows(), other.numCols());
    for (var row = 0; row < this.numRows(); row++)
        for (var col = 0; col < this.numCols(); col++) {
            var res = new Fraction();
            for (var i = 0; i < this.numCols(); i++)
                res = res.add(this.getCell(row, i).times(other.getCell(i, col)));
            result.update(row, col, res);
        }
    return result;
};
Matrix.prototype.timesScalar = function(val) {
    var result = new Matrix(this.numRows(), this.numCols());
    for (var row = 0; row < this.numRows(); row++)
        for (var col = 0; col < this.numCols(); col++) {
            result.update(row, col, this.getCell(row, col).times(val));
        }
    return result;
};
Matrix.prototype.divide = function(other, stp) {
    this.step = stp;
    other.step = stp;
    if (other instanceof Matrix)
        return this.times(other.inverse());
    else {
        if (other instanceof Fraction)
            return this.times(other.reciprocal());
        else
            return this.times(new Fraction(1, other));
    }
};
Matrix.prototype.power = function(power, step) {
    if (step !== undefined) {
        this.step = step;
    }
    if (this.numCols() != this.numRows())
        throw "You can only calculate powers of square matricies!";
    var result;
    if (power < 0) {
        result = this.inverse();
        power = Math.abs(power);
    } else if (power === 0)
        return this.getIdentity();
    else {
        result = this;
    }
    var base = result.clone();

    for (i = 1; i < power; i++) {
        var data = {
            type: '*',
            op1: result.clone(),
            op2: base
        };
        result = base.times(result);
        data.result = result.clone();
        this.step.push(new CalculationStep(data));
    }
    return result;
};
Matrix.prototype.conjugate = function(power) {
    return power.inverse().times(this).times(power);
};
Matrix.prototype.performFunction = function(func, args, step) {
    this.step = step;
    switch (func) {
        case funcENUM.TRANSPOSE:
            return this.transpose();
        case funcENUM.INVERSE:
            return this.inverse();
        case funcENUM.DET:
            return this.det();
        case funcENUM.RANK:
            return this.rank();
        case funcENUM.DIAGONALIZE:
            return null;
        case funcENUM.ROWREDUCE:
            return this.reduceToReducedEchF();
        case funcENUM.SOLVAUG:
            return this.reduceToReducedEchF(-1);
        case funcENUM.ID:
            return this.getIdentity(args[0], args[1]);
        case funcENUM.ZEROS:
            return this.getZeros(args[0], args[1]);
    }
    throw "Something weird just happened!";
};
Matrix.prototype.rank = function() {
    var rowReduced = this.reduceToReducedEchF(null, this.step);
    this.step.push(new CalculationStep({
        type: funcENUM.ROWREDUCE,
        op1: this,
        result: rowReduced
    }));
    this.step.push(new CalculationStep({
        type: 'comment',
        comment: 'Count non zero rows'
    }));

    // Start counting zero rows from the bottom since in RREForm zero rows are on the bottom
    // Once a none zero row is found, can stop, no more zero rows will be found
    var nonZeroFound = false,
        row,
        numZeroRows = 0;

    for (row = rowReduced.numRows() - 1; row >= 0; row--) {
        for (var col = 0; col < rowReduced.numCols(); col++) {        
            if (!rowReduced.getCell(row,col).isZero()){
                nonZeroFound = true;
                break;
            }
        }
        if (nonZeroFound){
            break;
        }
        numZeroRows++;
    }
    // Return a fraction for consistancy
    return new Fraction(rowReduced.numRows() - numZeroRows);

};
Matrix.prototype.reduceToReducedEchF = function(numCols, step) {
    if (numCols === undefined || numCols === null || numCols > this.numCols())
        numCols = this.numCols();
    if (step === undefined)
        step = this.step;
    else if (numCols == -1) // Allow func to be called with -1 for solving aug
        numCols--;
    var numRows = this.numRows();

    var result = this.clone();

    var currentPivPos = 0;
    for (var col = 0; col < numCols && currentPivPos < numRows; col++) {
        if (result.getCell(currentPivPos, col).isZero()) {
            var indexToSwap = result.getNonZeroRows(currentPivPos, col);
            if (indexToSwap != -1) {
                result.swap(indexToSwap, currentPivPos);
                step.push(new CalculationStep({
                    type: 'swap',
                    op1: indexToSwap,
                    result: result.clone(),
                    op2: currentPivPos
                }));
            } else
                continue;
        }
        var mult = result.getCell(currentPivPos, col).reciprocal();
        if (!mult.isOne()) {
            result.multiplier = result.multiplier.divide(mult);
            var data = {
                type: 'multiplyRow',
                op1: result.clone(),
                op2: mult,
                rowNum: currentPivPos
            };
            result.matrix[currentPivPos] = result.multiplyRow(currentPivPos, mult);
            data.result = result.clone();
            step.push(new CalculationStep(data));
        }

        result.kill(currentPivPos, col, step);
        currentPivPos++;
    }
    return result;
};
// MUTATES THE OBJECT
Matrix.prototype.kill = function(row, col, step) {
    for (var r = 0; r < this.numRows(); r++) {
        if (r == row)
            continue;
        var mult = this.getCell(r, col);
        if (!mult.isZero()) {
            var data = {
                type: 'subtractRows',
                op1: new Matrix(this.matrix[r]).clone(),
                op2: new Matrix(this.matrix[row]).clone(),
                multiplier: mult,
                row1Num: row,
                row2Num: r
            };
            this.matrix[r] = this.subtractRows(this.matrix[r],
                this.multiplyRow(row, mult), step);
            data.result = new Matrix(this.matrix[r]).clone();
            step.push(new CalculationStep(data));
        }
    }
};
Matrix.prototype.getNonZeroRows = function(row, col) {
    row++;
    while (row < this.numRows() && this.getCell(row, col).isZero())
        row++;
    if (row == this.numRows())
        return -1;
    else
        return row;
};
Matrix.prototype.subtractRows = function(row1, row2) {
    if (row1.length != row2.length)
        throw "Something weird happened!";
    var res = [];
    for (var i = 0; i < row1.length; i++)
        res.push(row1[i].subtract(row2[i]));
    return res;
};
Matrix.prototype.multiplyRow = function(row, mult) {
    var res = [];
    for (var col = 0; col < this.numCols(); col++)
        res.push(this.getCell(row, col).clone().times(mult));
    return res;
};
// MUTATES THIS OBJECT
Matrix.prototype.swap = function(row1, row2) {
    var tmp = this.matrix[row1];
    this.matrix[row1] = this.matrix[row2];
    this.matrix[row2] = tmp;
    this.multiplier = this.multiplier.times(-1);
};
Matrix.prototype.resize = function(rows, cols) {
    rows = parseInt(rows);
    cols = parseInt(cols);
    if (rows < this.numRows())
        this.matrix = this.matrix.slice(0, rows);
    else if (rows != this.numRows()) {
        var newRow = [];
        for (var i = 0; i < cols; i++)
            newRow.push(new Fraction());
        this.matrix.push(newRow);
    }
    if (cols < this.numCols()) {
        for (var row = 0; row < rows; row++)
            this.matrix[row] = this.matrix[row].slice(0, cols);
    } else if (cols != this.numCols())
        for (var i = 0; i < rows; i++)
            this.matrix[i].push(new Fraction());
};
Matrix.prototype.getIdentity = function(rows, cols) {
    if (rows === undefined && cols !== undefined)
        rows = cols;
    if (rows !== undefined && cols === undefined)
        cols = rows;
    // If called with no arguments - use this matrix's dimensions
    if (rows === undefined)
        rows = this.numRows();
    if (cols === undefined)
        cols = this.numCols();

    var result = [];
    for (var row = 0; row < rows; row++) {
        var sub = [];
        for (var col = 0; col < cols; col++)
            if (row == col)
                sub.push(new Fraction(1));
            else
                sub.push(new Fraction());
        result.push(sub);
    }

    return new Matrix(result);
};
Matrix.prototype.getZeros = function(rows, cols) {
    if (rows === undefined && cols !== undefined)
        rows = cols;
    if (rows !== undefined && cols === undefined)
        cols = rows;

    var result = [];
    for (var i = 0; i < rows; i++) {
        var sub = [];
        for (var j = 0; j < cols; j++)
            sub.push(new Fraction());
        result.push(sub);
    }

    return new Matrix(result);
};
Matrix.prototype.getTex = function() {
    var str = "\\begin{bmatrix}";
    for (var row = 0; row < this.numRows(); row++) {
        for (var col = 0; col < this.numCols(); col++)
            str += this.getCell(row, col).getTex() + ((col + 1 < this.numCols()) ? "&" : '');
        str += "\\\\";
    }
    str += "\\end{bmatrix}";
    return str;
};
Matrix.prototype.getRowTex = function(row) {
    var str = '\\begin{bmatrix}';
    for (var col = 0; col < this.numCols(); col++)
        str += this.getCell(row, col).getTex() + ((col + 1 < this.numCols()) ? "&" : '');
    return str + '\\end{bmatrix}';
};

var funcENUM = {
    NONE: '#',
    TRANSPOSE: '#T',
    INVERSE: '#I',
    RANK: '#R',
    DET: '#D',
    EIGEN: '#E',
    DIAGONALIZE: '#DI',
    ROWREDUCE: '#RRD',
    SOLVAUG: '#SA',
    ID: '#ID',
    ZEROS: '#ZE',
    isFunction: function(str) {
        var found = false;
        $.each(this, function(key, value) {
            if (value == str)
                found = true;
        });
        return found;
    },
    getString: function(str) {
        switch (str) {
            case this.TRANSPOSE:
                return "Transpose";
            case this.RANK:
                return "Rank";
            case this.INVERSE:
                return "Inverse";
            case this.DET:
                return "Determinant";
            case this.EIGEN:
                return "Eigenvalues/Vectors";
            case this.DIAGONALIZE:
                return "Diagonal form";
            case this.ROWREDUCE:
            case this.SOLVAUG:
                return "Reduced Row Echelon Form";
            case this.ID:
                return "Identity matrix";
            case this.ZEROS:
                return "0 matrix";
        }
        return "NOTHING";
    }
};

function getEnum(input) {
    switch (input.toLowerCase()) {
        case 'transpose':
        case 'trans':
            return funcENUM.TRANSPOSE;
        case 'inverse':
        case 'inv':
            return funcENUM.INVERSE;
        case 'rank':
            return funcENUM.RANK;
        case 'det':
        case 'determinant':
            return funcENUM.DET;
        case 'eigen':
            return funcENUM.EIGEN;
        case 'diagonalize':
            return funcENUM.DIAGONALIZE;
        case 'rowreduce':
            return funcENUM.ROWREDUCE;
        case 'solveaugmented':
        case 'solveaugmentedmatrix':
            return funcENUM.SOLVAUG;
        case 'id':
        case 'identity':
            return funcENUM.ID;
        case 'zeros':
            return funcENUM.ZEROS;
    }
    return funcENUM.NONE;
}

// Just don't look at this file, seriously, go watch netfilx, this file stinks

function MatrixInputManager(_variables, _popup, _quickCalcsPanel) {

    var $newMatrixBtn = $('#btnNewMat'),
        cellManager = new FractionalInputCellManager(onCellChanged),
        selectedVariables = [],
        count = 0,
        variables = _variables,
        popup = _popup,
        quickCalcsPanel = _quickCalcsPanel;

    function init() {
        $newMatrixBtn.on('click', function() {
            newInputComp();
        });
        variables.iterate(function(matrix, matLbl) { newInputComp(matLbl, matrix);});
        $('#bin').click(removeAllMatricies);
    }

    function removeAllMatricies() {
        $('.matInput').each(function() {
            deleteMatrix($(this));
        });
        variables.reset();
    }

    function render(data) {
        if (!variables.get(data.lbl))
            newInputComp(data.lbl, data.matrix);
        else {
            updateGUI(data.lbl, data.matrix);
        }
    }

    function newInputComp(matLbl, matrix) {
        if (matLbl === undefined) {
            matLbl = variables.getNextFreeLetter();
        }

        var row, col;
        if (matrix === null || matrix === undefined) {
            matrix = new Matrix();
        }
        if (matrix instanceof Matrix) {
            col = matrix.numCols();
            row = matrix.numRows();
        } else {
            row = col = 1;
        }

        variables.set(matLbl, matrix);
        var $div = $('<div id="MAT-' + matLbl + '" class="matInput draggable drag-drop" data-clicked="0">');
        var $span = $('<span class="label noSelect">');

        var $lab = $('<label class="noSelect">');
        var $labtxt = $('<input class="clickedit" type: "text">');



        $lab.append(matLbl);
        $span.append($lab);
        $span.append($labtxt);
        $span.append("     = ");
        $div.append($span);

        var $contnr = $('<div class="matContainer">');
        var $table = $("<table>", {
            class: isNaN(matrix) ? "matGui" : "",
            id: "t" + count
        });
        $table.attr("data-cols", col);
        $table.attr("data-rows", row);

        // Build up the table
        for (var i = 0; i < row; i++) {
            var $tr = $("<tr>");
            for (var j = 0; j < col; j++) {
                var $td = $("<td>");
                $td.append(cellManager.getCell(i, j, matrix instanceof Matrix ? matrix.getCell(i, j) :
                    matrix instanceof Fraction ? matrix : new Fraction(matrix)));
                $tr.append($td);
            }
            $table.append($tr);
        }
        $contnr.append($table);

        $div.append($contnr);
        if (matrix instanceof Matrix) {
            var $buttons = $('<div class="matrixButtons">'),
            $hiddenBtns = $('<div class="MatrixOpButtons noSelect">').appendTo($buttons),
            $modifiers = $('<div class="guiModifiers">').appendTo($buttons),

            $dragHandle = $('<div class="dragHandle icon-drag-handle">').appendTo($hiddenBtns),
            $allCalcButton = $('<div class="allCalcButton icon-info">').appendTo($hiddenBtns),
            $quickCalcsBtn = $('<div class="quickCalcsButton icon-quickCalcs">').appendTo($hiddenBtns);

            $allCalcButton.click(onAllCalcClicked);
            $quickCalcsBtn.click(quickCalcsPanel.onMatrixSelect);

            var btnImg = function(direction) {
                return $('<div class="icon-'+direction+'-arrow">');
            };

            var $colbtn = $('<button class="addCol colButton rowColModifier noSelect">');
            $colbtn.append(btnImg('right'));

            var $rowbtn = $('<button class="addRow rowButton rowColModifier noSelect">');
            $rowbtn.append(btnImg('down'));

            var $rmvColbtn = $('<button class="rmvCol colButton rowColModifier noSelect">');
            $rmvColbtn.append(btnImg('left'));

            var $rmvRowbtn = $('<button class="rmvRow rowButton rowColModifier noSelect">');
            $rmvRowbtn.append(btnImg('up'));

            $colbtn.attr("data-tableid", "t" + count);
            $rowbtn.attr("data-tableid", "t" + count);
            $rmvRowbtn.attr("data-tableid", "t" + count);
            $rmvColbtn.attr("data-tableid", "t" + count);

            $colbtn.click(onAddColumn);
            $rowbtn.click(onAddRow);
            $rmvColbtn.click(onRemoveColumn);
            $rmvRowbtn.click(onRemoveRow);

            $div.click(onMatrixSelect);

            count++;
            $modifiers.append($rmvRowbtn);
            $modifiers.append($rowbtn);
            $modifiers.append($rmvColbtn);
            $modifiers.append($colbtn);
            $div.append($buttons);
        }

        $('.matDefinitions').prepend($div);

        $('.clickedit').hide()
            .focusout(endEdit)
            .keyup(function(e) {
                $('body').trigger({
                    type: 'matrixNameChange',
                    original: $(this).closest(".matInput").attr('id').split("-")[1],
                    new: $(this).val()
                });
                e.stopImmediatePropagation();
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    endEdit(e);
                    return false;
                } else {
                    return true;
                }
            })
            .prev().click(function(e) {
                e.stopImmediatePropagation();
                $(this).hide();
                $(this).next().show().focus();
            });
    }

    function onMatrixSelect(e) {
        e.stopImmediatePropagation();
        var id = $(this).attr('id');
        if ($(this).attr("data-clicked") == 1) {
            // De-select
            $(this).attr("data-clicked", 0);
            selectedVariables.splice(selectedVariables.indexOf(id), 1);
        } else {
            // Select
            $(this).attr("data-clicked", 1);
            selectedVariables.push(id);
        }
        $selectedVariablesMatrix = this;
    }

    function onRemoveColumn(e) {
        e.stopImmediatePropagation();
        var $table = $("#" + $(this).attr("data-tableid"));
        var numCols = parseInt($table.attr("data-cols"));
        var numRows = parseInt($table.attr("data-rows"));
        if (numCols > 1) {
            $("#" + $(this).attr("data-tableid") + " td:last-child").remove();
            numCols--;
            $table.attr("data-cols", numCols);
            var varName = $(this).closest(".matInput").attr("id").split("-")[1];
            variables.get(varName).resize(numRows, numCols);
        }
        $('body').trigger('matrixChange');
    }

    function onAddColumn(e) {
        e.stopImmediatePropagation();
        var rowCount = 0;
        $table = $("#" + $(this).attr("data-tableid"));
        var n = $table.attr("data-cols") - 1;
        var m = $table.attr("data-rows");
        $table.attr("data-cols", n + 2);
        $table.find('tr').each(function() {
            var $td = $("<td>");
            $td.append(cellManager.getCell(rowCount, n + 1, new Fraction("0")));
            rowCount++;
            $(this).find('td').eq(n).after($td);
        });
        var varName = $(this).closest(".matInput").attr("id").split("-")[1];
        variables.get(varName).resize(parseInt(m), n + 2);
        $('body').trigger('matrixChange');
    }

    function onAddRow(e) {
        e.stopImmediatePropagation();
        $table = $("#" + $(this).attr("data-tableid"));
        var numCols = $table.attr("data-cols");
        var numRows = $table.attr("data-rows");
        $table.attr("data-rows", parseInt(numRows) + 1);

        $tr = $("<tr>");
        for (i = 0; i < numCols; i++) {
            $td = $("<td>");
            $td.append(cellManager.getCell(numRows, i, new Fraction('0')));
            $tr.append($td);
        }

        $table.append($tr);
        var varName = $(this).closest(".matInput").attr("id").split("-")[1];
        variables.get(varName).resize(parseInt(numRows) + 1, parseInt(numCols));
        $('body').trigger('matrixChange');
    }

    function onRemoveRow(e) {
        e.stopImmediatePropagation();
        var $table = $("#" + $(this).attr("data-tableid"));
        var numRows = parseInt($table.attr("data-rows"));
        var numCols = parseInt($table.attr("data-cols"));
        if (numRows > 1) {
            $("#" + $(this).attr("data-tableid") + " tr:last-child").remove();
            numRows--;
            $table.attr("data-rows", numRows);
            var varName = $(this).closest(".matInput").attr("id").split("-")[1];
            variables.get(varName).resize(numRows, numCols);
        }
        $('body').trigger('matrixChange');
    }

    function onAllCalcClicked(e) {
        e.stopImmediatePropagation();
        var clickedLbl = $(this).closest(".matInput").attr("id").split("-")[1];
        popup.render({
            header: "Stuff about " + clickedLbl + "!!",
            body: new AllCalculations(clickedLbl, variables.get(clickedLbl)).getTex()
        });
    }

    function endEdit(e) {
        e.stopImmediatePropagation();

        var input = $(e.currentTarget),
            label = input && input.prev(),
            oldName;

        //make cammel case if needed
        var inputted = makeCammelCase(input.val());
        var err = false;
        if (!variables.isValid(inputted, false)) {
            oldName = label.closest("div").attr('id').split("-")[1];
            label.text(oldName);
            err = true;

            $('body').trigger({
                type: "matrixConfirmNameChange",
                original: oldName,
                new: oldName
            });
        } else {
            label.text(inputted);
            oldName = label.closest("div").attr('id').split("-")[1];
            var mat = variables.get(oldName);
            variables.delete(oldName);
            variables.set(inputted, mat);
            label.closest("div").attr('id', "MAT-" + inputted);
            $('body').trigger({
                type: "matrixConfirmNameChange",
                original: oldName,
                new: inputted
            });
        }
        input.hide();
        label.show();
        input.val("");

        if (err)
            $('body').trigger({
                type: 'error',
                msg: 'Invalid Variable Name :('
            });
    }

    function onCellChanged(e) {
        e.stopImmediatePropagation();
        if (variables === undefined)
            return;

        var varName = $(e.currentTarget).closest(".matInput").attr("id").split("-")[1];
        var row =  $(e.currentTarget).attr("data-row");
        var col =  $(e.currentTarget).attr("data-col");

        var newFrac = new Fraction ($(e.currentTarget).children('.top').val().trim(),
                                                $(e.currentTarget).children('.bottom').val().trim());

        variables.get(varName).update(row, col, newFrac);
        $('body').trigger({
            type: 'matrixCellChange',
            key: varName
        });
        cellManager.updateCell($(e.currentTarget).parent(), newFrac.getTopString(), newFrac.getBottomString());
    }

    function makeCammelCase(inputted) {
        inputted = inputted.replace(/\b[a-z]/g, function(f) {
            return f.toUpperCase();

        });
        inputted = inputted.replace(/ /g, '').replace(/-/g, '');
        if (inputted.length > 1)
            inputted = inputted.charAt(0).toLowerCase() + inputted.slice(1);
        return inputted;
    }

    function updateGUI(lbl, matrix) {

        if (matrix instanceof Matrix) {

            var dRow = parseInt(matrix.numRows() - $('#MAT-' + lbl).find('table').attr('data-rows'));
            var dCol = parseInt(matrix.numCols() - $('#MAT-' + lbl).find('table').attr('data-cols'));
            if (dRow !== 0 || dCol !== 0) {

                var $guiMods = $('#MAT-' + lbl).find('.guiModifiers');
                var $addCol = $guiMods.find('.addCol');
                var $rmvCol = $guiMods.find('.rmvCol');
                var $addRow = $guiMods.find('.addRow');
                var $rmvRow = $guiMods.find('.rmvRow');


                for (var i = 0; i < Math.abs(dRow); i++)
                    if (dRow < 0)
                        $rmvRow.trigger('click');
                    else
                        $addRow.trigger('click');

                for (i = 0; i < Math.abs(dCol); i++)
                    if (dCol < 0)
                        $rmvCol.trigger('click');
                    else
                        $addCol.trigger('click');

            }
        }
        variables.set(lbl, matrix);
        $('#MAT-' + lbl).find('table tr').each(function() {
            $(this).find('td').each(function() {
                var row = $(this).children().attr("data-row"),
                    col = $(this).children().attr("data-col"),
                    top,bottom;

                if (matrix instanceof Matrix) {
                    var frac = matrix.getCell(row, col);
                    top = frac.getTopString();
                    bottom = frac.getBottomString();
                } else if (matrix instanceof Fraction) {
                    top = matrix.getTopString();
                    bottom = matrix.getBottomString();
                }   else {
                    top = matrix;
                }
                cellManager.updateCell($(this), top, bottom);
            });
        });
    }

    interact('.dropzone').dropzone({
        // only accept elements matching this CSS selector
        accept: '.matInput',
        // Require a 75% element overlap for a drop to be possible
        //overlap: 'pointer',

        ondragenter: function(event) {
            $(event.relatedTarget).addClass('deleting');
            $('#bin').addClass("binOpen");

        },
        ondragleave: function(event) {
            $(event.relatedTarget).removeClass('deleting');
            $('#bin').removeClass("binOpen");
        },
        ondrop: function(event) {
            deleteMatrix(event.relatedTarget);

            // Remove from list if it was selectedVariables at time of deleation
            var index = selectedVariables.indexOf($(event.relatedTarget).attr("id"));
            if (index != -1)
                selectedVariables.splice(index, 1);
        },
    });

    function deleteMatrix(obj) {
        var id = $(obj).attr("id").split('-')[1];
        variables.delete(id);
        $(obj).remove();
        $('#bin').removeClass("binOpen");

        $('body').trigger({
            type: 'matrixDelete',
            lbl: id
        });
    }

    $(document).keyup(function(e) {
        if (e.keyCode == 46)
            for (var i in selectedVariables) {
                deleteMatrix($('#' + selectedVariables[i]));
            }
        selectedVariables = [];
    });


    return {
        init: init,
        render: render
    };
}

function Parser(_variables) {
    var variables = _variables;

    function performCalc(cmd) {
        cmd = cmd.replace(/ /g, '').replace(/\n/g, '');

        // Split lines by semi colon and run each command seperatly
        if (cmd.indexOf(';') > 0) {
            var commands = cmd.split(';');
            for (var c in commands)
                performCalc(commands[c]);
            return;
        }

        if (cmd === '')
            return;

        var org = cmd;
        var lbl = '';
        var containsEqs = false;
        if (cmd.indexOf('=') > 0) {
            containsEqs = true;
            lbl = cmd.split('=')[0];
            if (variables.isValid(lbl, true))
                cmd = cmd.split('=')[1];
            else
                throw "Invalid Variable Name :(";

        } else
            lbl = variables.getNextFreeLetter();
        cmd = '(' + cmd + ')';

        var calcSteps = new CalculationArray();

        var theArray = getArrayFromString(cmd);
        if (!containsEqs && theArray.length == 3) {
            $("#MAT-" + org).trigger("click");
            $("#MAT-" + org).get(0).scrollIntoView();
            return;
        }

        for (var i = 0; i < theArray.length; i++) {
            if (!isCloseBracket(theArray[i]))
                continue;

            var j = i;
            while (!isOpenBracket(theArray[j])) {
                if (isOperator(theArray[j])) {
                    var stp = new CalculationStep({
                        type: theArray[j],
                        op1: theArray[j - 1],
                        op2: theArray[j + 1]
                    });
                    var res = calculate( theArray[j], theArray[j - 1], theArray[j + 1], stp);
                    stp.data.result = res;
                    calcSteps.push(stp);
                    theArray.splice(j, 2);
                    theArray[j - 1] = res;
                }
                j--;
            }
            if (funcENUM.isFunction(theArray[j - 1])) {
                var args = [],
                    cnt = 0;

                while (!isCloseBracket(theArray[cnt + (j + 1)])) {
                    if (theArray[cnt + (j + 1)] != ',')
                        args.push(theArray[cnt + (j + 1)]);
                    cnt++;
                }
                var step = new CalculationStep({
                    type: theArray[j - 1],
                    op1: args[0],
                });
                var r = performFunction(theArray[j - 1], args,step);
                step.data.result = r;
                calcSteps.push(step);
                theArray.splice(j, cnt + 2);
                theArray[j - 1] = r;
            } else {
                theArray.splice(j, 1); // get rid of (
                theArray.splice(j + 1, 1); // get rid of )
            }
            if (j !== 0)
                i = j - 1;
            else
                break;
        }

        calcSteps.render($('.sidebarBody'));

        return {
            lbl: lbl,
            matrix: theArray[0].clone()
        };
    }

    function getArrayFromString(cmd) {
        var openBktCnt = 1;
        var closeBktCnt = 0;

        var theArray = [];
        theArray.add = function(arg) {
            if (isOpenBracket(arg))
                openBktCnt++;
            else if (isCloseBracket(arg))
                closeBktCnt++;
            this.push(arg);
        };

        theArray.push('(');

        var highPrecendeces = [];
        for (var i = 1; i < cmd.length; i++) {
            if (isOperatorOrBracket(cmd[i]) &&
                !isOperatorOrBracket(cmd[i - 1])) {

                var j = i - 1;
                var identifier = '';
                while (!isOperatorOrBracket(cmd[j])) {
                    identifier = cmd[j] + identifier;
                    j--;
                }

                var result;
                if (!isNaN(identifier)) {
                    result = new Fraction(identifier);
                    // Allow correct parsing of sign
                    if (theArray[theArray.length - 1] == '-' &&
                        isNaN(theArray[theArray.length - 2])) {
                        theArray.pop();
                        result = result.times(-1);
                    }
                    if (theArray[theArray.length - 1] == '+' &&
                        isNaN(theArray[theArray.length - 2])) {
                        theArray.pop();
                    }

                } else
                if ((result = getEnum(identifier)) == funcENUM.NONE) {
                    if (typeof(result = variables.get(identifier)) === 'undefined')
                        if ((result = identifier) != ',')
                            throw 'Sorry, I don\'t know what \'' + identifier + '\' is :(';
                }

                theArray.push(result);

            }
            if (isOperatorOrBracket(cmd[i]))
                theArray.add(cmd[i]);
        }

        // TODO Precedences

        if (openBktCnt > closeBktCnt)
            throw "Unexpected character (";
        else if (closeBktCnt > openBktCnt)
            throw "Unexpected character )";
        return theArray;
    }

    function performFunction(func, arg, step) {
        if (arg[0] instanceof Matrix)
            return arg[0].performFunction(func, null,step);
        else {
            if (func != funcENUM.ID && func != funcENUM.ZEROS)
                throw "Cannot perform operation: " + funcENUM.getString(func) + " of " + arg[0];
            return new Matrix().performFunction(func, arg, step);
        }

    }

    function calculate(op, before, after, stp) {
        var result;
        switch (op) {
            case '+':
                if (before instanceof Matrix && !(after instanceof Matrix) ||
                    after instanceof Matrix && !(before instanceof Matrix))
                    throw "You can't add a matrix and number sorry!";

                result = before.add(after);
                break;
            case '-':
                if (before instanceof Matrix && !(after instanceof Matrix) ||
                    after instanceof Matrix && !(before instanceof Matrix))
                    throw "You can't add a matrix and number sorry!";

                result = before.subtract(after);
                break;
            case '/':
                if (!(before instanceof Matrix) && after instanceof Matrix)
                    throw "You can't divide a number by a matrix!";
                else
                    result = before.divide(after,stp);
                break;
            case '*':
                if (before instanceof Matrix)
                    result = before.times(after);
                else if (after instanceof Matrix)
                    result = after.times(before);
                else
                    result = before.times(after);
                break;
            case '^':
                if (before instanceof Matrix) {
                    before.step = stp;
                    if (after instanceof Matrix)
                        result = before.conjugate(after);
                    else
                        result = before.power(after);
                }   else {
                    if (!(before instanceof Fraction) || !(after instanceof Fraction))
                        throw "That's not valid maths! ";

                    result = before.power(after);
                }
                break;
        }
        return result;
    }

    function isOperator(str) {
        return '+^-*/'.split('').indexOf(str) >= 0;
    }

    function isCloseBracket(str) {
        return str === ')';
    }

    function isOpenBracket(str) {
        return str === '(';
    }

    function isBrackets(str) {
        return isCloseBracket(str) || isOpenBracket(str);
    }

    function isOperatorOrBracket(str) {
        return isOperator(str) || isBrackets(str) || str == ',';
    }

    function isSquiggle(str) {
        return str === '}' || str === '{';
    }

    return {
        parse: performCalc
    };
}

function Popup() {
    var $container = $('<div class="popUpContainer">'),
        $header = $('<div class="popUpHeader noSelect">'),
        $headerText = $('<p class="popUpHeaderText">'),
        $close = $('<div class="closebtn icon-close">'),
        $popupBody = $('<div class="popUpBody">'),
        $window = $(window),
        $body = $('body'),

        isFullScreen;

    function init() {
        $container.hide();
        $header.append($headerText);
        $header.append($close);

        $container.append($header);
        $container.append($popupBody);
        $body.append($container);
        $window.resize(resize);

        $body.on('sidebarResize quickCalcsToggle', resize);
        $body.on('closePopup', close);
        $close.on('click', close);

        resize();
    }

    function close() {
        $popupBody.css("height", "");
        $container.css("height", "");
        $container.hide();
    }

    function resize() {
        $container.width($window.width() - 23 - $('.sidebar').width());
        if (isFullScreen) {
            $container.height(window.innerHeight * 0.98);
            $popupBody.height($container.height() - $headerText.height() - (parseInt($popupBody.css('padding-top')) * 2));
        }

        $container.css('top', (window.innerHeight - $container.height()) / 2);

        if ($('#quickCalcsContainer').is(":visible")) {
            var quickCalcsHeight = $('#quickCalcsContainer').height();
            $container.css('top', quickCalcsHeight + 10);

            if (isFullScreen) {
                $container.height($container.height() - quickCalcsHeight);
                $popupBody.height($popupBody.height() - quickCalcsHeight);
            }
        }
    }

    function renderContent(content, fullScreen = true) {
        isFullScreen = fullScreen;
        $headerText.empty();
        $popupBody.empty();
        $headerText.append(content.header);
        $popupBody.append(content.body);
        MathJax.Hub.Queue(["Typeset",MathJax.Hub, '.popUpBody']);

        // TODO Some kind of loading bar or spinning thing to indicate calculation
        MathJax.Hub.Queue(function() {
            $container.show();
            resize();
        });
    }


    return {
        render: renderContent,
        init: init
    };
}

function QuickCalculations() {
    var matrixManager,
        variables,
        matrixSpecific = [{
            func: funcENUM.TRANSPOSE,
            text: "Transpose"
        }, {
            func: funcENUM.INVERSE,
            text: "Inverse"
        }, {
            func: funcENUM.RANK,
            text: "Rank"
        }, {
            func: funcENUM.ROWREDUCE,
            text: "Row Reduce"
        }, {
            func: funcENUM.DET,
            text: "Determinant"
        }],
        matrixGeneral = [{
            func: funcENUM.ID,
            text: "New Identity Matrix"
        }, {
            func: funcENUM.ZEROS,
            text: "New Zero Matrix"
        }],

        currentMatrix = null,
        currentLbl = null,
        scalarMultiple = new Fraction(1),
        power = new Fraction(1),
        cellManager = new FractionalInputCellManager(onScalarChange);

    var $mainContainer = $('#quickCalcsContainer'),
        $specificFuncsContainer = $('.quickClassMatSpecific'),
        $generalFuncsContainer = $('.quickCalcsGeneral'),
        $title = $('.quickCalcsMatLabel'),
        $pinIcon = $('.quickCalcsPinIcon'),
        $errorLabel = $('.quickCalcsErrDisplay'),
        $errorContainer = $('.quickCalcsErrContainer'),
        $dropdowns = $('.quickCalcsOperatorsContainer').find('select').not('.quickCalcsAddMatricies'),
        $addDropDown = $('.quickCalcsAddMatricies'),
        $scalarMultiple = $('.quickCalcsScalarContainer');

    function init(_matrixManager, _variables) {
        matrixManager = _matrixManager;
        variables = _variables;
        initSpecificBtns();
        initGeneralBtns();
        bindEvents();

        $scalarMultiple.append(cellManager.getCell(null,null,new Fraction(1)));

        if (typeof(Storage) !== "undefined" && localStorage.getItem('pinned') === 'true') {
            $mainContainer.parent().addClass("quickCalcsOpen");
            $('body').trigger('quickCalcsToggle');
            onPinIconClicked();
        }
    }

    function onScalarChange(e) {
        e.stopImmediatePropagation();
        scalarMultiple = new Fraction ($(e.currentTarget).children('.top').val().trim(),
                                       $(e.currentTarget).children('.bottom').val().trim());
        cellManager.updateCell($(e.currentTarget).parent(), scalarMultiple.getTopString(), scalarMultiple.getBottomString());
    }

    function onMultClicked(e) {
        var otherMatrix = variables.get($(this).find($('select')).val());

        var calcSteps = new CalculationArray();
        var step = new CalculationStep({
            type: '*',
        });

        try {
            var start = Date.now();
            $errorLabel.hide();

            if ($(e.currentTarget).hasClass('quickCalcsPostMult')) {
                if (!(otherMatrix instanceof Matrix))
                    return;
                step.data.result = currentMatrix.times(otherMatrix);
                step.data.op1 = currentMatrix;
                step.data.op2 = otherMatrix;
            } else if ($(e.currentTarget).hasClass('quickCalcsPreMult')) {
                if (!(otherMatrix instanceof Matrix))
                    return;
                step.data.result = otherMatrix.times(currentMatrix);
                step.data.op1 = otherMatrix;
                step.data.op2 = currentMatrix;
            } else if ($(e.currentTarget).hasClass('quickCalcsScalarMult')) {
                step.data.result = currentMatrix.times(scalarMultiple);
                step.data.op1 = currentMatrix;
                step.data.op2 = scalarMultiple;
            } else if ($(e.currentTarget).hasClass('quickCalcsPowerCalc')) {
                var pow = parseInt($('.quickCalcsPowerCalc .inputCell').val());
                step.data.result = currentMatrix.power(pow, step);
                step.data.type = '^';
                step.data.op1 = currentMatrix;
                step.data.op2 = new Fraction(pow);
            } else if ($(e.currentTarget).hasClass('quickCalcsAdd')) {
                if (!(otherMatrix instanceof Matrix))
                    return;
                step.data.result = otherMatrix.add(currentMatrix);
                step.data.type = '+';
                step.data.op1 = currentMatrix;
                step.data.op2 = otherMatrix;
            } else {
                throw "Something weird just happened :(";
            }
            matrixManager.render({
                matrix: step.data.result
            });

            var end = Date.now() - start;
            successHandle(end);
            console.log("Operation done in " + end + "ms");

            calcSteps.push(step);
            calcSteps.render($('.sidebarBody'));
        } catch (err) {
            errorHandle(err);
        }
    }

    function bindEvents() {
        $('.functionButtonsContainer .quickBtn').click(onButtonClick);
        $mainContainer.mouseleave(onMouseLeave);
        $mainContainer.mouseenter(onMouseEnter);
        $pinIcon.click(onPinIconClicked);
        $('body').on('matrixNameChange', onNameTempChange);
        $('body').on('matrixConfirmNameChange', onNameConfirmedChange);
        $('body').on('matrixDelete', onMatrixDelete);
        $('body').on('error', function(data) {
            errorHandle(data.msg);
        });
        $('body').on('matrixChange', fillDropDowns);

        // Stop clicking on dropdowns from doing anything
        $('.quickBtn option, .quickBtn select, .quickBtn input').click(function() { return false; });

        $('.quickCalcsOperatorsContainer .quickBtn').click(onMultClicked);
    }

    var mouseEntered = false;

    function onMouseLeave(e) {
        if ($(e.relatedTarget).closest('.headerMenu').length > 0 || $mainContainer.hasClass('pinned'))
            return;

        if (mouseEntered) {
            $('body').removeClass('quickCalcsOpen');
            $('body').trigger('quickCalcsToggle');
            mouseEntered = false;
        }
    }

    function onMouseEnter() {
        mouseEntered = true;
        return false;
    }

    function onPinIconClicked() {
        $mainContainer.toggleClass('pinned');

        if (typeof(Storage) !== "undefined") {
            localStorage.setItem("pinned", $mainContainer.hasClass('pinned'));
        }

    }

    function onMatrixDelete(data) {
        if (data.lbl === currentLbl) {
            $mainContainer.addClass('quickCalcsNoMatrix');
            currentLbl = null;
            currentMatrix = null;
            changeTitle('');
        }
    }

    function onNameTempChange(data) {
        if (data.original === currentLbl) {
            changeTitle(data.new);
        }
    }

    function onNameConfirmedChange(data) {
        if (data.original === currentLbl) {
            changeTitle(data.new);
            currentLbl = data.new;
        }
    }

    function onButtonClick(e) {
        var func = $(e.currentTarget).attr('data-func');
        if ($(e.currentTarget).parent().hasClass('quickCalcsGeneral')) {
            matrixManager.render({
                matrix: new Matrix().performFunction(func, [3, 3])
            });
        } else {

            var calcSteps = new CalculationArray();
            var step = new CalculationStep({
                type: func,
                op1: currentMatrix,
            });

            try {
                var start = Date.now();
                $errorLabel.hide();

                step.data.result = currentMatrix.performFunction(func, null, step)
                matrixManager.render({
                    matrix: step.data.result
                });

                var end = Date.now() - start;
                successHandle(end);
                console.log("Operation done in " + end + "ms");

                calcSteps.push(step);
                calcSteps.render($('.sidebarBody'));
            } catch (err) {
                errorHandle(err);
            }
        }
    }

    function errorHandle(err) {
        console.log(err);
        $errorContainer.removeClass('success');
        $errorLabel.text(err).show(200);
        setTimeout(function() {
            $errorLabel.hide(500);
        }, 10000);
    }

    function successHandle(msg) {
        $errorContainer.addClass('success');
        $errorLabel.text('Command Successful! (' + msg + ' ms' + ')').show(200);
        setTimeout(function() {
            $errorLabel.hide(500);
        }, 2000);
    }

    function initSpecificBtns() {
        for (var btn in matrixSpecific) {
            $specificFuncsContainer.append(newButton(matrixSpecific[btn]));
        }
    }

    function initGeneralBtns() {
        for (var btn in matrixGeneral) {
            $generalFuncsContainer.append(newButton(matrixGeneral[btn]));
        }
    }

    function newButton(data) {
        return '<div class="quickBtn" data-func="' + data.func + '"> \
                    <div class="icon-left-bracket"></div>  \
                    <div class="quickCalcBtnText">' + data.text + '</div> \
                    <div class="icon-right-bracket"></div>  \
                </div>';
    }

    function changeTitle(newVal) {
        $title.empty();
        $title.append(newVal);
    }

    function fillDropDowns() {
        if (!(currentMatrix instanceof Matrix))
            return;

        $dropdowns.empty().val('');
        $addDropDown.empty().val('');

        variables.iterate(addToDropDown);

        if (currentMatrix.numCols() === currentMatrix.numRows()){
            $mainContainer.removeClass('quickCalcsCurrentNonSquare');
        } else {
            $mainContainer.addClass('quickCalcsCurrentNonSquare');
        }
    }

    function addToDropDown(matrix, lbl) {
        if (!(matrix instanceof Matrix))
            return;

        var numRows,numCols;
        if (currentMatrix.numRows() === matrix.numCols() && currentMatrix.numCols() === matrix.numRows()) {
            $dropdowns.append('<option>' + lbl + '</option>');
        }
        if (currentMatrix.numRows() === matrix.numRows() && currentMatrix.numCols() === matrix.numCols()) {
            $addDropDown.append('<option>' + lbl + '</option>');
        }
    }

    function onMatrixSelect() {
        $('body').addClass("quickCalcsOpen");
        $('body').trigger('quickCalcsToggle');

        $mainContainer.removeClass('quickCalcsNoMatrix');

        currentLbl = $(this).closest(".matInput").attr("id").split("-")[1];
        changeTitle(currentLbl);
        currentMatrix = variables.get(currentLbl);
        fillDropDowns();
        return false;
    }
    return {
        init: init,
        onMatrixSelect: onMatrixSelect
    };
}

function Settings() {
    var template = `
    <div class="settingsContainer">
        <p>Colours</p>
        <div class="settingsColours">
        </div>

        <p>Themes</p>
        <div class="settingsThemes">
        </div>
    </div>
    `,
    $stylesheet = $('#theme');

    // GULP-INCLUDE(THEME&COLOURS)
var colours = ["blue","green","purple","cyan"]; 
var themes = ["light","dark"];
    /*
    -- Gulp will include the following lines here
        var colours = ['green', 'blue'];
        var themes = ['light','dark'];
    */
    var $settingsDom = $(template);
    function init() {
        appendColours($settingsDom.find('.settingsColours'));
        appendThemes($settingsDom.find('.settingsThemes'));
        $('body').on('click', '.settingsOption', onSettingsChanged);
        if (localStorage.hasOwnProperty('themeAndColour')) {
            $stylesheet.attr('href', localStorage.getItem('themeAndColour'));
        }
    }

    function onSettingsChanged() {
        var choice, href;
        if ((choice = $(this).attr('data-theme'))){
            href = $stylesheet.attr('href').split('/');
            href[1] = choice;
        } else if ((choice = $(this).attr('data-col'))){
            href = $stylesheet.attr('href').split('/');
            href[2] = choice;
        }
        href = href.join('/');
        $stylesheet.attr('href', href);
        localStorage.setItem("themeAndColour", href);
    }

    function appendColours($parent) {
        colours.forEach(function(col) {
            $parent.append(getOptionDom(`COLOUR-${col}`, `data-col=${col}`));
        });
    }

    function appendThemes($parent) {
        themes.forEach(function(base) {
            $parent.append(getOptionDom(`BASE-${base}`, `data-theme=${base}` ));
        });
    }

    function getOptionDom(xtraClass, data) {
        return `
            <div class=\"settingsOption ${xtraClass}\" ${data}>
            </div>
        `;
    }

    function getDom() {
        return $settingsDom;
    }

    return {
        init: init,
        getDom: getDom
    };
}

function Sidebar() {
    var $sidebarContainer = $('.sidebar'),
        $sidebarBody = $('.sidebarBody'),
        $dragHandle = $('.handle'),
        $snapHandle = $('.snapHandle'),
        $fullScreenToggle = $('.fullScreen'),

        currentWidth = handleWidth,
        handleWidth = $dragHandle.width();

    function init() {

        $dragHandle.on('mousedown', onSnapHandleMouseDown);
        $dragHandle.dblclick(onHandleDoubleClick);
        $snapHandle.click(onSnapClick);
        $fullScreenToggle.click(toggleFullScreen);

        $(document).mouseup(function(e) {
            $(document).off('mousemove');
        });
    }

    function expandSidebar() {
        $sidebarContainer.width($(window).width() * 0.75);
        $snapHandle.removeClass('expand');
    }

    function collapseSidebar() {
        $sidebarContainer.width(handleWidth);
        $snapHandle.addClass('expand');
    }

    function toggleFullScreen() {
        if ($fullScreenToggle.hasClass('unfullScreen'))
            $sidebarContainer.css('width', currentWidth);
        else {
            currentWidth = $sidebarContainer.width();
            $sidebarContainer.width($(window).width());
        }
        $fullScreenToggle.toggleClass('unfullScreen');
    }

    function onSnapClick() {
        if ($sidebarContainer.width() == handleWidth) {
            expandSidebar();
        } else {
            collapseSidebar();
        }
        $('body').trigger('sidebarResize');
    }

    function onHandleDoubleClick() {
        if ($sidebarContainer.width() !== handleWidth)
            collapseSidebar();
        else
            expandSidebar();
        $('body').trigger('sidebarResize');
    }

    function onSnapHandleMouseDown() {
        $(document).on('mousemove', function(e) {
            e.stopImmediatePropagation();
            $('body').trigger('sidebarResize');
            var amount = $sidebarContainer.position().left - e.pageX;
            if (amount < 0 || $sidebarContainer.width() < $(window).width())
                $sidebarContainer.width($sidebarContainer.width() + $sidebarContainer.position().left - e.pageX);

            if ($sidebarContainer.width() > $(window).width())
                $sidebarContainer.width($(window).width());
            if ($sidebarContainer.width() !== handleWidth)
                $snapHandle.removeClass('expand');
            else
                $snapHandle.addClass('expand');
        });
    }
    return {
        init: init
    };
}

function Variables() {
    var variables = new Map(),
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),
        letterIndex = -1;

    function get(k) {
        return variables.get(k);
    }

    function set(key, val) {
        if (key === undefined)
            return;
        variables.set(key, val);
        $('body').trigger('matrixChange');
        updateStore(key);
    }

    function updateStore(key) {
        localStorage.setItem('MATRIX-' + key, JSON.stringify(get(key).matrix));
    }

    function removeFromStore(key) {
        localStorage.removeItem('MATRIX-' + key);
    }

    function extractAllFromStore() {
        for (var key in localStorage) {
            var res;
            if ((res = /MATRIX-(.+)/.exec(key))) {
                if (localStorage.getItem(key) === 'undefined') {
                    continue;
                }
                var rawData = JSON.parse(localStorage.getItem(key));
                for (var i = 0; i < rawData.length; i++)
                    for (var j = 0; j < rawData[i].length; j++)
                        rawData[i][j] = new Fraction(rawData[i][j].top, rawData[i][j].bottom);

                set(res[1], new Matrix(rawData));
            }
        }
    }

    function deleteVar(key) {
        variables.delete(key);
        $('body').trigger('matrixChange');
        removeFromStore(key);
    }

    function iterate(callback) {
        variables.forEach(callback);
    }

    function isValid(inputted, allowDuplicate) {
        return /^[a-z][a-z0-9]*$/i.test(inputted) && (allowDuplicate ? true :
                variables.get(inputted) === undefined) &&
            getEnum(inputted) === funcENUM.NONE;
    }

    function getNextFreeLetter() {
        letterIndex = (letterIndex + 1) % alphabet.length;

        if (isValid(alphabet[letterIndex])) {
            localStorage.setItem('letterIndex', letterIndex);
            return alphabet[letterIndex];
        }

        var withRndm = alphabet[letterIndex] + parseInt(Math.random() * 100);
        if (isValid(withRndm)) {
            localStorage.setItem('letterIndex', letterIndex);
            return withRndm;
        }
        else
            getNextFreeLetter();
    }

    function onCellChange(data) {
        if (localStorage.hasOwnProperty('MATRIX-' + data.key))
            updateStore(data.key);
    }

    function init() {
        extractAllFromStore();
        $('body').on('matrixCellChange', onCellChange);
        if (localStorage.hasOwnProperty('letterIndex')) {
            letterIndex = parseInt(localStorage.getItem('letterIndex'));
        }

    }

    function resetLetters() {
        letterIndex = -1;
        localStorage.setItem('letterIndex', letterIndex);
    }

    return {
        get: get,
        set: set,
        getNextFreeLetter: getNextFreeLetter,
        isValid: isValid,
        delete: deleteVar,
        iterate: iterate,
        init: init,
        reset: resetLetters
    };
}

// Start everything!!
$(document).ready(function() {
    new ApplicationManager().init();

    // Intialize draggableness
    interact('.draggable')
        .draggable({
            snap: {
                targets: [
                    interact.createSnapGrid({
                        x: 20,
                        y: 20
                    })
                ],
                range: Infinity,
                relativePoints: [{
                    x: 0,
                    y: 0
                }]
            },


            // enable inertial throwing
            inertia: true,
            // keep the element within the area of it's parent
            restrict: {
                restriction: "#mainBody",
                endOnly: false,
                elementRect: {
                    top: 0,
                    left: 0,
                    bottom: 0,
                    right: 1
                }
            },
            // enable autoScroll
            autoScroll: true,

            // call this function on every dragmove event
            onmove: function(event) {
                var target = event.target,
                    // keep the dragged position in the data-x/data-y attributes
                    x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
                    y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

                // translate the element
                target.style.webkitTransform =
                    target.style.transform =
                    'translate(' + x + 'px, ' + y + 'px)';

                // update the posiion attributes
                target.setAttribute('data-x', x);
                target.setAttribute('data-y', y);
            }

        }).allowFrom('.dragHandle');




});
